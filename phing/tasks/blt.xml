<project name="blt" default="update">
  <target name="init" depends="blt:rsync-template">
    <echo>BLT files have been copied to your project directory.</echo>
    <echo>Please customize ${repo.root}/project.yml and then run:</echo>
    <echo>blt configure</echo>
  </target>

  <target name="blt:rsync-template">
    <echo>Copying BLT files into place.</echo>
    <!-- @todo Do not overwrite structured or executable files. Instead, update them intelligently. composer.json, project.yml, settings.php, drush.wrapper etc. -->
    <exec dir="${repo.root}" command="rsync -a --no-g --no-p --update ${blt.root}/template/ ${repo.root}/ --filter 'protect /.git/' --filter 'protect /project.yml/' -v" logoutput="true" checkreturn="true"/>
  </target>

  <target name="update" depends="blt:rsync-template, blt:update-composer, blt:update-yml, configure">
    <!-- @todo Ignore some files, settings.php, project.yml, in update. Instead, change only specific values. -->
    <echo>Some of your customized files may have been overwritten.</echo>
    <echo>Use "git add -p [filename]" to select which changes should be committed to each file.</echo>
  </target>

  <target name="blt:update-composer" description="Updates project composer.json with a subset of new key value pairs from upstream. This WILL overwrite existing values.">
    <!--Values in the project's existing composer.json file will be overwritten.-->
    <exec dir="${blt.root}" command="php application.php composer:munge ${repo.root}/composer.json ${blt.root}/template/composer.json > ${repo.root}/composer.json" logoutput="true" checkreturn="true"/>
    <echo>composer.json has been modified, please run "composer update".</echo>
  </target>
  <target name="blt:update-yml" description="Updates project BLT .yml files with new key value pairs from upstream. This WILL NOT overwrite existing values.">
    <!--Values in the project's existing project.yml file will be preserved and not overridden.-->
    <exec dir="${blt.root}" command="php application.php yaml:munge ${blt.root}/template/project.yml ${repo.root}/project.yml > ${repo.root}/project.yml" logoutput="true" checkreturn="true"/>
    <echo>project.yml has been modified.</echo>
  </target>

  <target name="configure">
    <echo>Expanding Phing properties in BLT files.</echo>
    <!-- Reflexively expand properties in specified dirs/files. -->
    <reflexive>
      <fileset dir="${repo.root}">
        <include name="composer.json" />
        <include name="README.md" />
        <include name="docroot/profiles/custom/**/*" />
        <include name="docroot/sites/default/settings.php" />
        <include name="docroot/sites/all/settings/**/*" />
      </fileset>
      <filterchain>
        <expandproperties />
      </filterchain>
    </reflexive>
  </target>

  <target name="install-alias" description="Installs the BLT alias for command line usage.">
    <if>
      <not><equals arg1="${create_alias}" arg2="false"/></not>
      <then>
        <exec dir="${blt.root}/scripts/blt" command="./install-alias.sh" checkreturn="true" logoutput="true"/>
      </then>
    </if>
  </target>

  <!-- This target is meant to test BLT itself on TravisCI.
       A few things to note:
       - We do not run validate:* targets, since they can be run in parallel.
  -->
  <target name="self-test" description="Runs tests against acquia/blt proper.">
    <phingcall target="configure" />
    <phingcall target="create" />
    <phingcall target="setup:build" />
    <phingcall target="setup:drupal:install" />
    <phingcall target="setup:git-hooks" />
    <phingcall target="setup:behat" />
    <phingcall target="tests:security-updates" />
    <phingcall target="tests:behat" />
    <phingcall target="tests:phpunit" />
  </target>
</project>
